testdb.hs:(21,11)-(34,2): Splicing expression
    "\nPerson \n    name String Update Eq Ne Desc In\n    age Int Update \"Asc\" Lt \"some ignored attribute\"\n    color String Maybe Eq Ne NotIn Ge\n    PersonNameKey name\nPet\n    owner PersonId\n    name String\nNull\n    field Int Maybe Eq Ne Gt NotIn In\nTable\n    table String\n"
  ======>
    [Database.Persist.Base.EntityDef
       "Person"
       []
       [("name", "String", ["Update", "Eq", "Ne", "Desc", "In"]),
        ("age", "Int", ["Update", "Asc", "Lt", "some ignored attribute"]),
        ("color", "String", ["Maybe", "Eq", "Ne", "NotIn", "Ge"])]
       [("PersonNameKey", ["name"])]
       ["Show", "Read", "Eq"],
     Database.Persist.Base.EntityDef
       "Pet"
       []
       [("owner", "PersonId", []), ("name", "String", [])]
       []
       ["Show", "Read", "Eq"],
     Database.Persist.Base.EntityDef
       "Null"
       []
       [("field", "Int", ["Maybe", "Eq", "Ne", "Gt", "NotIn", "In"])]
       []
       ["Show", "Read", "Eq"],
     Database.Persist.Base.EntityDef
       "Table" [] [("table", "String", [])] [] ["Show", "Read", "Eq"]]
testdb.hs:1:1: Splicing declarations
    mkPersist
      [Database.Persist.Base.EntityDef
         "Person"
         []
         [("name", "String", ["Update", "Eq", "Ne", "Desc", "In"]),
          ("age", "Int", ["Update", "Asc", "Lt", "some ignored attribute"]),
          ("color", "String", ["Maybe", "Eq", "Ne", "NotIn", "Ge"])]
         [("PersonNameKey", ["name"])]
         ["Show", "Read", "Eq"],
       Database.Persist.Base.EntityDef
         "Pet"
         []
         [("owner", "PersonId", []), ("name", "String", [])]
         []
         ["Show", "Read", "Eq"],
       Database.Persist.Base.EntityDef
         "Null"
         []
         [("field", "Int", ["Maybe", "Eq", "Ne", "Gt", "NotIn", "In"])]
         []
         ["Show", "Read", "Eq"],
       Database.Persist.Base.EntityDef
         "Table" [] [("table", "String", [])] [] ["Show", "Read", "Eq"]]
  ======>
    testdb.hs:(21,1)-(34,2)
    data Person
        = Person {personName :: String,
                  personAge :: Int,
                  personColor :: Maybe String}
        deriving (Show, Read, Eq)
    type PersonId = Key Person
    instance PersistEntity Person where
        newtype instance Key Person
            = PersonId {unPersonId :: PersistValue}
            deriving (Show,
                      Read,
                      Eq,
                      PersistField,
                      Web.Routes.Quasi.Classes.SinglePiece,
                      Ord)
        data instance Filter Person
            = PersonIdIn [Key Person] |
              PersonNameEq String |
              PersonNameNe String |
              PersonNameIn [String] |
              PersonAgeLt Int |
              PersonColorEq Maybe String |
              PersonColorNe Maybe String |
              PersonColorNotIn [Maybe String] |
              PersonColorGe String
            deriving (Show, Read, Eq)
        data instance Update Person
            = PersonName String | PersonAge Int deriving (Show, Read, Eq)
        data instance Order Person
            = PersonNameDesc | PersonAgeAsc deriving (Show, Read, Eq)
        data instance Unique Person
            = PersonNameKey String deriving (Show, Read, Eq)
        { entityDef _
            = Database.Persist.Base.EntityDef
                "Person"
                []
                [("name", "String", ["Update", "Eq", "Ne", "Desc", "In"]),
                 ("age", "Int", ["Update", "Asc", "Lt", "some ignored attribute"]),
                 ("color", "String", ["Maybe", "Eq", "Ne", "NotIn", "Ge"])]
                [("PersonNameKey", ["name"])]
                ["Show", "Read", "Eq"]
          toPersistFields (Person x[a2Hi] x[a2Hj] x[a2Hk])
            = [Database.Persist.Base.SomePersistField x[a2Hi],
               Database.Persist.Base.SomePersistField x[a2Hj],
               Database.Persist.Base.SomePersistField x[a2Hk]]
          fromPersistValues [x[a2Hl], x[a2Hm], x[a2Hn]]
            = (((Right Person
               `Database.Persist.TH.apE`
                 fromPersistValue x[a2Hl])
              `Database.Persist.TH.apE`
                fromPersistValue x[a2Hm])
             `Database.Persist.TH.apE`
               fromPersistValue x[a2Hn])
          fromPersistValues _ = Left "Invalid fromPersistValues input"
          halfDefined = Person undefined undefined undefined
          toPersistKey = PersonId
          fromPersistKey = unPersonId
          showPersistKey = show
          persistOrderToFieldName PersonNameDesc {} = "name"
          persistOrderToFieldName PersonAgeAsc {} = "age"
          persistOrderToOrder PersonNameDesc {} = Database.Persist.Base.Desc
          persistOrderToOrder PersonAgeAsc {} = Database.Persist.Base.Asc
          persistUpdateToFieldName PersonName {} = "name"
          persistUpdateToFieldName PersonAge {} = "age"
          persistUpdateToValue (PersonName x) = toPersistValue x
          persistUpdateToValue (PersonAge x) = toPersistValue x
          persistUpdateToUpdate PersonName {} = Database.Persist.Base.Update
          persistUpdateToUpdate PersonAge {} = Database.Persist.Base.Update
          persistFilterToFieldName PersonIdIn {} = "id"
          persistFilterToFieldName PersonNameEq {} = "name"
          persistFilterToFieldName PersonNameNe {} = "name"
          persistFilterToFieldName PersonNameIn {} = "name"
          persistFilterToFieldName PersonAgeLt {} = "age"
          persistFilterToFieldName PersonColorEq {} = "color"
          persistFilterToFieldName PersonColorNe {} = "color"
          persistFilterToFieldName PersonColorNotIn {} = "color"
          persistFilterToFieldName PersonColorGe {} = "color"
          persistFilterToValue (PersonIdIn x[a2HA])
            = (Right . map toPersistValue) x[a2HA]
          persistFilterToValue (PersonNameEq x[a2Hs])
            = (Left . toPersistValue) x[a2Hs]
          persistFilterToValue (PersonNameNe x[a2Ht])
            = (Left . toPersistValue) x[a2Ht]
          persistFilterToValue (PersonNameIn x[a2Hu])
            = (Right . map toPersistValue) x[a2Hu]
          persistFilterToValue (PersonAgeLt x[a2Hv])
            = (Left . toPersistValue) x[a2Hv]
          persistFilterToValue (PersonColorEq x[a2Hw])
            = (Left . toPersistValue) x[a2Hw]
          persistFilterToValue (PersonColorNe x[a2Hx])
            = (Left . toPersistValue) x[a2Hx]
          persistFilterToValue (PersonColorNotIn x[a2Hy])
            = (Right . map toPersistValue) x[a2Hy]
          persistFilterToValue (PersonColorGe x[a2Hz])
            = (Left . toPersistValue) x[a2Hz]
          persistUniqueToFieldNames PersonNameKey {} = ["name"]
          persistUniqueToValues (PersonNameKey x[a2Ho])
            = [toPersistValue x[a2Ho]]
          persistUniqueKeys (Person _name[a2Hp] _age[a2Hq] _color[a2Hr])
            = [PersonNameKey _name[a2Hp]]
          persistFilterToFilter PersonIdIn {} = Database.Persist.Base.In
          persistFilterToFilter PersonNameEq {} = Database.Persist.Base.Eq
          persistFilterToFilter PersonNameNe {} = Database.Persist.Base.Ne
          persistFilterToFilter PersonNameIn {} = Database.Persist.Base.In
          persistFilterToFilter PersonAgeLt {} = Database.Persist.Base.Lt
          persistFilterToFilter PersonColorEq {} = Database.Persist.Base.Eq
          persistFilterToFilter PersonColorNe {} = Database.Persist.Base.Ne
          persistFilterToFilter PersonColorNotIn {}
            = Database.Persist.Base.NotIn
          persistFilterToFilter PersonColorGe {} = Database.Persist.Base.Ge }
    data Pet
        = Pet {petOwner :: PersonId, petName :: String}
        deriving (Show, Read, Eq)
    type PetId = Key Pet
    instance PersistEntity Pet where
        newtype instance Key Pet
            = PetId {unPetId :: PersistValue}
            deriving (Show,
                      Read,
                      Eq,
                      PersistField,
                      Web.Routes.Quasi.Classes.SinglePiece,
                      Ord)
        data instance Filter Pet = PetIdIn [Key Pet]
        data instance Update Pet =
        data instance Order Pet =
        data instance Unique Pet =
        { entityDef _
            = Database.Persist.Base.EntityDef
                "Pet"
                []
                [("owner", "PersonId", []), ("name", "String", [])]
                []
                ["Show", "Read", "Eq"]
          toPersistFields (Pet x[a2HB] x[a2HC])
            = [Database.Persist.Base.SomePersistField x[a2HB],
               Database.Persist.Base.SomePersistField x[a2HC]]
          fromPersistValues [x[a2HD], x[a2HE]]
            = ((Right Pet `Database.Persist.TH.apE` fromPersistValue x[a2HD])
             `Database.Persist.TH.apE`
               fromPersistValue x[a2HE])
          fromPersistValues _ = Left "Invalid fromPersistValues input"
          halfDefined = Pet undefined undefined
          toPersistKey = PetId
          fromPersistKey = unPetId
          showPersistKey = show
          persistOrderToFieldName _
            = error "Degenerate case, should never happen"
          persistOrderToOrder _
            = error "Degenerate case, should never happen"
          persistUpdateToFieldName _
            = error "Degenerate case, should never happen"
          persistUpdateToValue _
            = error "Degenerate case, should never happen"
          persistUpdateToUpdate _
            = error "Degenerate case, should never happen"
          persistFilterToFieldName PetIdIn {} = "id"
          persistFilterToValue (PetIdIn x[a2HH])
            = (Right . map toPersistValue) x[a2HH]
          persistUniqueToFieldNames _
            = error "Degenerate case, should never happen"
          persistUniqueToValues _
            = error "Degenerate case, should never happen"
          persistUniqueKeys (Pet _owner[a2HF] _name[a2HG]) = []
          persistFilterToFilter PetIdIn {} = Database.Persist.Base.In }
    data Null = Null {nullField :: Maybe Int} deriving (Show, Read, Eq)
    type NullId = Key Null
    instance PersistEntity Null where
        newtype instance Key Null
            = NullId {unNullId :: PersistValue}
            deriving (Show,
                      Read,
                      Eq,
                      PersistField,
                      Web.Routes.Quasi.Classes.SinglePiece,
                      Ord)
        data instance Filter Null
            = NullIdIn [Key Null] |
              NullFieldEq Maybe Int |
              NullFieldNe Maybe Int |
              NullFieldGt Int |
              NullFieldNotIn [Maybe Int] |
              NullFieldIn [Maybe Int]
            deriving (Show, Read, Eq)
        data instance Update Null =
        data instance Order Null =
        data instance Unique Null =
        { entityDef _
            = Database.Persist.Base.EntityDef
                "Null"
                []
                [("field", "Int", ["Maybe", "Eq", "Ne", "Gt", "NotIn", "In"])]
                []
                ["Show", "Read", "Eq"]
          toPersistFields (Null x[a2HI])
            = [Database.Persist.Base.SomePersistField x[a2HI]]
          fromPersistValues [x[a2HJ]]
            = (Right Null `Database.Persist.TH.apE` fromPersistValue x[a2HJ])
          fromPersistValues _ = Left "Invalid fromPersistValues input"
          halfDefined = Null undefined
          toPersistKey = NullId
          fromPersistKey = unNullId
          showPersistKey = show
          persistOrderToFieldName _
            = error "Degenerate case, should never happen"
          persistOrderToOrder _
            = error "Degenerate case, should never happen"
          persistUpdateToFieldName _
            = error "Degenerate case, should never happen"
          persistUpdateToValue _
            = error "Degenerate case, should never happen"
          persistUpdateToUpdate _
            = error "Degenerate case, should never happen"
          persistFilterToFieldName NullIdIn {} = "id"
          persistFilterToFieldName NullFieldEq {} = "field"
          persistFilterToFieldName NullFieldNe {} = "field"
          persistFilterToFieldName NullFieldGt {} = "field"
          persistFilterToFieldName NullFieldNotIn {} = "field"
          persistFilterToFieldName NullFieldIn {} = "field"
          persistFilterToValue (NullIdIn x[a2HQ])
            = (Right . map toPersistValue) x[a2HQ]
          persistFilterToValue (NullFieldEq x[a2HL])
            = (Left . toPersistValue) x[a2HL]
          persistFilterToValue (NullFieldNe x[a2HM])
            = (Left . toPersistValue) x[a2HM]
          persistFilterToValue (NullFieldGt x[a2HN])
            = (Left . toPersistValue) x[a2HN]
          persistFilterToValue (NullFieldNotIn x[a2HO])
            = (Right . map toPersistValue) x[a2HO]
          persistFilterToValue (NullFieldIn x[a2HP])
            = (Right . map toPersistValue) x[a2HP]
          persistUniqueToFieldNames _
            = error "Degenerate case, should never happen"
          persistUniqueToValues _
            = error "Degenerate case, should never happen"
          persistUniqueKeys (Null _field[a2HK]) = []
          persistFilterToFilter NullIdIn {} = Database.Persist.Base.In
          persistFilterToFilter NullFieldEq {} = Database.Persist.Base.Eq
          persistFilterToFilter NullFieldNe {} = Database.Persist.Base.Ne
          persistFilterToFilter NullFieldGt {} = Database.Persist.Base.Gt
          persistFilterToFilter NullFieldNotIn {}
            = Database.Persist.Base.NotIn
          persistFilterToFilter NullFieldIn {} = Database.Persist.Base.In }
    data Table = Table {tableTable :: String} deriving (Show, Read, Eq)
    type TableId = Key Table
    instance PersistEntity Table where
        newtype instance Key Table
            = TableId {unTableId :: PersistValue}
            deriving (Show,
                      Read,
                      Eq,
                      PersistField,
                      Web.Routes.Quasi.Classes.SinglePiece,
                      Ord)
        data instance Filter Table = TableIdIn [Key Table]
        data instance Update Table =
        data instance Order Table =
        data instance Unique Table =
        { entityDef _
            = Database.Persist.Base.EntityDef
                "Table" [] [("table", "String", [])] [] ["Show", "Read", "Eq"]
          toPersistFields (Table x[a2HR])
            = [Database.Persist.Base.SomePersistField x[a2HR]]
          fromPersistValues [x[a2HS]]
            = (Right Table `Database.Persist.TH.apE` fromPersistValue x[a2HS])
          fromPersistValues _ = Left "Invalid fromPersistValues input"
          halfDefined = Table undefined
          toPersistKey = TableId
          fromPersistKey = unTableId
          showPersistKey = show
          persistOrderToFieldName _
            = error "Degenerate case, should never happen"
          persistOrderToOrder _
            = error "Degenerate case, should never happen"
          persistUpdateToFieldName _
            = error "Degenerate case, should never happen"
          persistUpdateToValue _
            = error "Degenerate case, should never happen"
          persistUpdateToUpdate _
            = error "Degenerate case, should never happen"
          persistFilterToFieldName TableIdIn {} = "id"
          persistFilterToValue (TableIdIn x[a2HU])
            = (Right . map toPersistValue) x[a2HU]
          persistUniqueToFieldNames _
            = error "Degenerate case, should never happen"
          persistUniqueToValues _
            = error "Degenerate case, should never happen"
          persistUniqueKeys (Table _table[a2HT]) = []
          persistFilterToFilter TableIdIn {} = Database.Persist.Base.In }
Linking testdb ...
